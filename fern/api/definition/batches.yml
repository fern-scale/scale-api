# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json
service:
  auth: true
  base-path: /batches
  endpoints:
    list:
      path: ""
      method: GET
      docs: >-
        This is a paged endpoint for all of your batches. Batches will be
        returned in descending order based on `created_at`. Pagination is based
        off `limit` and `offset` parameters, which determine the page size and
        how many results to skip.
      display-name: List All Batches
      request:
        name: ListBatchesRequest
        query-parameters:
          project:
            docs: Project name to filter batches by
            type: optional<string>
          status:
            docs: >-
              Status to filter batches by (`staging` or `in_progress` or
              `completed`)
            type: optional<string>
          start_time:
            docs: The minimum value of `created_at` for batches to be returned
            type: optional<string>
          end_time:
            docs: The maximum value of `created_at` for batches to be returned
            type: optional<string>
          completed_after:
            docs: The minimum value of 'completed_at' for batches to be returned
            type: optional<string>
          completed_before:
            docs: The maximum value of 'completed_at' for batches to be returned
            type: optional<string>
          audited_after:
            docs: The minimum value of 'last_audited_at' for batches to be returned
            type: optional<string>
          audited_before:
            docs: The maximum value of 'last_audited_at' for batches to be returned
            type: optional<string>
          limit:
            docs: >-
              Number between 1&ndash;100, number of results per page (default
              100)
            type: optional<integer>
          offset:
            docs: Number of results to skip for showing following pages (default 0)
            type: optional<integer>
      response: BatchList

    create:
      path: ""
      method: POST
      docs: >-
        Create a new Batch within a project. Batches will be created with a
        status of `in_progress`. For users participating in our "Scale Rapid"
        Early Access, batches will be created with a status of `staging`. See
        the [Batch Overview](/reference/batch-overview) for additional details.
      display-name: Batch Creation
      request:
        name: CreateBatchRequest
        body:
          properties:
            project:
              docs: The name of the project this batch (and its tasks) belong to
              type: string
            name:
              docs: >-
                Name identifying this batch. Must be unique among all batches
                belonging to a customer.
              type: string
            callback:
              docs: >-
                The full url (including the scheme `http://` or `https://`) or
                email address of the [callback](/reference/callbacks) that will
                be used when the task is completed.
              type: optional<string>
            calibration_batch:
              docs: >-
                Only applicable for Rapid projects. Create an calibration batch
                by setting the calibration_batch flag to true.
              type: optional<boolean>
            self_label_batch:
              docs: >-
                Only applicable for Rapid projects. Create a self label batch by
                setting the self_label_batch flag to true.
              type: optional<boolean>
      response: Batch

    finalize:
      path: /{batchName}/finalize
      method: POST
      docs: >-
        For "Scale Rapid and Studio" customers only, finalizes a batch with name
        `batchName` so its tasks can be worked on.
        Non-(Rapid/Studio) customers do not need to use this endpoint - calling
        this endpoint will not do anything, but still return a `200` success
        status code.
      display-name: Finalize Batch
      path-parameters:
        batchName: string
      response: Batch

    get:
      path: /{batchName}
      method: GET
      docs: This endpoint returns the details of a batch with the name `:batchName`.
      display-name: Batch Retrieval
      path-parameters:
        batchName: string
      response: Batch
      examples: 
        - path-parameters:
            batchName: kitten_labeling_2020-07
          response: 
            body: 
              project: "kitten_labeling"
              name: "kitten_labeling_2020-07"
              created_at: "2022-09-20 10:27:21.240752"

    getStatus:
      path: /{batchName}/status
      method: GET
      docs: >-
        This endpoint returns the status of a batch with the name `:batchName`,
        as well as the counts of its tasks grouped by task status.
      display-name: Batch Status
      path-parameters:
        batchName: string
      response: BatchStatusResponse

types:
  BatchList:
    properties:
      docs: optional<list<Batch>>
      total: optional<integer>
      limit: optional<integer>
      offset: optional<integer>
      has_more: optional<boolean>
  
  Batch:
    properties:
      project: optional<string>
      name: optional<string>
      status: optional<string>
      callback: optional<string>
      created_at: optional<string>

  BatchStatusResponse:
    properties:
      status: optional<BatchStatus>
      pending: optional<integer>
      error: optional<integer>
      completed: optional<integer>
      canceled: optional<integer>
  
  BatchStatus: 
    enum: 
      - staging
      - in_progress
      - completed

